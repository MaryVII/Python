{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOZEWi+wM2PaTUveSuuuST6"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "#String Indexing & Python Data Structure"
      ],
      "metadata": {
        "id": "KhINNLmlFPPR"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Table of Contents\n",
        "- [Section 4: String Indexing](#section4)\n",
        "  - [section 1.1: Word Index](#subsection4.1)\n",
        "  - [section 1.2: Index Slicing](#subsection4.2)\n",
        "  - [section 1.3: Concatenate Strings](#subsection4.3)\n",
        "- [Section 5: Python Data Structure](#section5)\n",
        "  - [section 5.1: List](#subsection5.1)\n",
        "    - [section 5.1.1: Extend Function](#subsection5.1.1)\n",
        "    - [section 5.1.2: Append Function](#subsection5.1.2)\n",
        "    - [section 5.1.3: Deleting Items](#subsection5.1.3)\n",
        "    - [section 5.1.4: Count Funtion](#subsection5.1.4)\n",
        "    - [section 5.1.5: Remove Function](#subsection5.1.5)\n",
        "    - [section 5.1.6: Insert Function](#subsection5.1.6)\n",
        "    - [section 5.1.7: Reverse Function](#subsection5.1.7)\n",
        "  - [section 5.2: Tuple](#subsection5.2)\n",
        "    - [section 5.2.1: Comparison Between List And Tuple](#subsection5.2.1)\n",
        "    - [section 5.2.2: Sort Function In Tuple](#subsection5.2.2)\n",
        "    - [section 5.2.3: Convert Tuple Into A List](#subsection5.2.3)"
      ],
      "metadata": {
        "id": "bsVIv3FCFpTB"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Section 4: String Indexing**\n",
        "\n",
        "Having a refence of something"
      ],
      "metadata": {
        "id": "rVaAL9MtinUS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "singer = 'Michael Jackson'"
      ],
      "metadata": {
        "id": "zD0B8shriwSF"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "singer"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "Q0W-CbukjAL7",
        "outputId": "2289a966-ccd6-4e50-d1ad-86ddf5ab4785"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'Michael Jackson'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "type(singer)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "j2Ysz4S6jDJ7",
        "outputId": "98a06e1d-df02-40ca-b0da-c88eb1566e96"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "str"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Section 4.1: Word Index**\n",
        "the print (variable[numnber]) will show us the letter on the respective number </p>"
      ],
      "metadata": {
        "id": "XZQYrvECjmnr"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### singer = \"some string value\"  # Example value for the variable singer\n",
        "print(singer)        # Prints the entire string </p>\n",
        "print(singer[2])     # Prints the character at index 2 </p>\n",
        "print(singer[5])     # Prints the character at index 5 </p>\n",
        "print(singer[10])    # Prints the character at index 10 </p>\n",
        "print(singer[13])    # Prints the character at index 13 </p>"
      ],
      "metadata": {
        "id": "a417QMEHktzi"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print (singer)\n",
        "print (singer[2])\n",
        "print (singer[5])\n",
        "print (singer[10])\n",
        "print (singer[13])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ie4GTPkKjE__",
        "outputId": "0ef56c60-22f0-43db-b392-79a47ef79975"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Michael Jackson\n",
            "c\n",
            "e\n",
            "c\n",
            "o\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Left to right use postive numbering"
      ],
      "metadata": {
        "id": "LK3cZgzplcxW"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "<img src=\"https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/PY0101EN/Chapter%201/Images/StringsIndex.png\" width=\"600\" align=\"center\" />"
      ],
      "metadata": {
        "id": "zr8HG7OskgEY"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### We can also do it in reverse from right to left (using negative number)\n",
        "tip: always use index -1 to print last character to make the counting easier"
      ],
      "metadata": {
        "id": "Iz6cuZbalEoO"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "<img src=\"https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/PY0101EN/Chapter%201/Images/StringsNeg.png\" width=\"600\" align=\"center\" />"
      ],
      "metadata": {
        "id": "2fmxE8U9kjck"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print (singer [-13])\n",
        "print (singer[10])\n",
        "print (singer[-2])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Rt8B9a2Ik4Ez",
        "outputId": "e43a52eb-a1ef-45e5-c5c3-94c6536edeb5"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "c\n",
            "c\n",
            "o\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Print the last, second last and first, and the second of any string"
      ],
      "metadata": {
        "id": "QaHJ0fnalnr6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "##Count Function\n",
        "counting the frequency of an item in a list</p>\n",
        "counting how many time an item appeared in the list#First\n",
        "print (anystring[0])\n",
        "#Second\n",
        "print (anystring[1])\n",
        "#Last (will always be -1 to make it easier to count)\n",
        "print (anytstring[-1])\n",
        "#Second last (will always be -2)\n",
        "print (anystring[-2])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "XbXecik4lyCt",
        "outputId": "af20f8e2-b614-4fc9-83aa-1f21718986d5"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "error",
          "ename": "SyntaxError",
          "evalue": "invalid syntax (<ipython-input-7-c12e1730ae80>, line 2)",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-7-c12e1730ae80>\"\u001b[0;36m, line \u001b[0;32m2\u001b[0m\n\u001b[0;31m    counting the frequency of an item in a list</p>\u001b[0m\n\u001b[0m             ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **ERROR ALERT!!**\n",
        "\n",
        "The swiggly line underneath \"anystring\" indicate there will be an error, because the varibale \"anystring\" is not defined yet"
      ],
      "metadata": {
        "id": "camwFdlcmvzq"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Section 4.2: Index Slicing**\n",
        "\n",
        "print (anystring [index to start from : index to stop at])"
      ],
      "metadata": {
        "id": "TIiNt4sknHI4"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "<img src=\"https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/PY0101EN/Chapter%201/Images/StringsIndex.png\" width=\"600\" align=\"center\" />"
      ],
      "metadata": {
        "id": "dGFMICC0ni22"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print (singer[0:6])\n",
        "#Oh no? Why didn't it print 'Michael'?"
      ],
      "metadata": {
        "id": "UiUNzZvymC7u",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3e328b70-ae9f-4eb9-8146-7b273a934387"
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Michae\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### ALERT!!\n",
        "\n",
        "The last number in the command print(singer[0:6]), which is index 6, will not be printed. Therefore, ensure to add the next number, as shown below."
      ],
      "metadata": {
        "id": "YIdT0QMWntNc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print (singer[0:7])"
      ],
      "metadata": {
        "id": "oKV0-DFsnpow",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "dda6af4d-4663-4d8b-fe20-679074297769"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Michael\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Another way to write the code is to not mention the index 0"
      ],
      "metadata": {
        "id": "ggDmCKUxoFTu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print (singer[:7])"
      ],
      "metadata": {
        "id": "Vhx9AHninrtv",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c76f9dc9-4c4c-4fd3-fa74-e8fa2e9d0bee"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Michael\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **ALERT!!**\n",
        "\n",
        "Keep in mind in python : the space, comma, question mark etc will have an index </p>\n",
        "So if we want to print the word 'Jackson'; </p>\n",
        "But we start the input from index 7, note that this will also print the preceding space as well"
      ],
      "metadata": {
        "id": "JmJH4lCJo5BG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#printing Jackson (This code will print the empty space as well, because index 7 is a space)\n",
        "print (singer[7:])"
      ],
      "metadata": {
        "id": "jDqcCM14oDhX",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ef3ee5f4-1d7f-4aa1-bcd8-54643dae2beb"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " Jackson\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#printing Jackson (without the space)\n",
        "print (singer[8:])"
      ],
      "metadata": {
        "id": "kklnbWULpQ0V",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7cfc8c66-e23b-4ef3-bb19-9bfa8ef439f2"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Jackson\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print (singer[8:-1])"
      ],
      "metadata": {
        "id": "alVuTJQApX2z",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6e28295d-0a8e-463c-c8d9-cd12aac19258"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Jackso\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print (singer[-7:])"
      ],
      "metadata": {
        "id": "uUUUXEHlpiMK",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "192ba333-1096-408a-94e8-21e6d9333fb1"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Jackson\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print (singer[8:15])"
      ],
      "metadata": {
        "id": "_-oYBqU2pl2T",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2686ea72-f2ea-4b13-9816-9c64e5f06974"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Jackson\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "<img src=\"https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/PY0101EN/Chapter%201/Images/StringsIndex.png\" width=\"600\" align=\"center\" />"
      ],
      "metadata": {
        "id": "6u7g8zqFqU_4"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Slice Notation**</p>\n",
        "Start: The index where the slice begins. If omitted, it defaults to the beginning of the string (index 0). </p>\n",
        "Stop: The index where the slice ends (but not including this index).</p>\n",
        "Step: The interval between each index in the slice. It specifies how many characters to skip.</p>\n",
        "\n",
        "**Explanation of [:7:2]**</p>\n",
        "Start: Not specified, so it defaults to the beginning of the string (index 0).</p>\n",
        "Stop: 7, so the slice includes characters up to, but not including, index 7.</p>\n",
        "Step: 2, so it takes every second character from the start to the stop index.</p>"
      ],
      "metadata": {
        "id": "5qK4vs5prT5m"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Then number 2 index in this code meaning it will skip every 2 character\n",
        "print (singer[:7:2])"
      ],
      "metadata": {
        "id": "Jh7zNMd_qVvI",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4f3a50de-0964-41b8-f1b5-9caab7ceb185"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mcal\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print (singer[:7:3])"
      ],
      "metadata": {
        "id": "LnItuVSWqjLD",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8048ec76-ef18-4f0b-8fe4-b82171cbdca1"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mhl\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Section 4.3: Concatenate Strings**"
      ],
      "metadata": {
        "id": "gedrznFUrpGV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "str1 = 'Big'\n",
        "str2 = 'Data'\n",
        "\n",
        "str3 = str1 + str2\n",
        "\n",
        "print (str3)"
      ],
      "metadata": {
        "id": "PmEyriryrvkE",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0dd58151-787f-4cd7-9ab5-1c88731f1ebe"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "BigData\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "str4 = str2 + str1\n",
        "\n",
        "str4"
      ],
      "metadata": {
        "id": "5CFeVT6dsID6",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "outputId": "f75b8d56-adf1-4791-c132-d489b913e430"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'DataBig'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "str3 = str1 + ' ' + str2\n",
        "\n",
        "str3"
      ],
      "metadata": {
        "id": "Igl5PtATs44I",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "outputId": "1ab9776e-7eb1-4a74-ef81-dab9f4224c8b"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'Big Data'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Another way to add space is by adding space next to the string when we defined the variable\n",
        "str5 = ' Data'\n",
        "\n",
        "str6 = str1 + str5\n",
        "str6"
      ],
      "metadata": {
        "id": "tPpwTgOHtIla",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "outputId": "ff6bf1dc-8b1f-41c0-f772-c628b1c08643"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'Big Data'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **ERROR ALERT!!**\n",
        "\n",
        "Concatenating is only from string to a string"
      ],
      "metadata": {
        "id": "TcbBpOrTuxPp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "str7 = str1 + 2024\n",
        "str7"
      ],
      "metadata": {
        "id": "kxyX81jUtgih",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "outputId": "20e17df9-6d0c-4b85-f632-88034ba25e37"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "error",
          "ename": "TypeError",
          "evalue": "can only concatenate str (not \"int\") to str",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-22-1c68da80770f>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mstr7\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstr1\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m2024\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mstr7\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mTypeError\u001b[0m: can only concatenate str (not \"int\") to str"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "str8 = str1 + '2024'\n",
        "str8"
      ],
      "metadata": {
        "id": "SZuX-SSut7Ip",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "outputId": "599cdac0-bfd9-430f-f3de-b79ff3037e1c"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'Big2024'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "str9 = '2024'\n",
        "print (str9)"
      ],
      "metadata": {
        "id": "N-8Bn-lfuBip",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2dd0de25-f7fe-4312-f068-0d4c3e54f43e"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2024\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Checking data type\n",
        "type (str9)"
      ],
      "metadata": {
        "id": "kcdOjYPUuPtq",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "cb2f6c60-8cf8-4a99-cbcf-cf3e5932c6e9"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "str"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Changing a string into integer\n",
        "str10 = int(str9)\n",
        "print (str10)"
      ],
      "metadata": {
        "id": "1kvtFILUuTtp",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f2943eb5-30c9-4fd6-ea11-c820efdaf7b1"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2024\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "type(str10)"
      ],
      "metadata": {
        "id": "jN0UmVJKuauL",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "714703bb-f274-446a-a274-764e7474c715"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "int"
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###**ERROR ALERT!!**\n",
        "\n",
        "String cannot be concatenate with float as well"
      ],
      "metadata": {
        "id": "PkZGMwWwHHQ8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "str11 = str1 + 2.2\n",
        "str11"
      ],
      "metadata": {
        "id": "OdwFXsbCucZz",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "outputId": "519b73af-f3a9-45f5-9151-90bee25396d9"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "error",
          "ename": "TypeError",
          "evalue": "can only concatenate str (not \"float\") to str",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-28-4b866f66d2dd>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mstr11\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mstr1\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m2.2\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mstr11\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mTypeError\u001b[0m: can only concatenate str (not \"float\") to str"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "str12 = '2.2'\n",
        "print (str12)"
      ],
      "metadata": {
        "id": "GUgkLsZWu8RY",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1648d014-3f41-4ab5-a02a-ee372a9b8ca6"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2.2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "type(str12)"
      ],
      "metadata": {
        "id": "Hs9AJBwRvZI0",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "74c7bedf-3d3f-4337-99c0-7a97d6299f88"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "str"
            ]
          },
          "metadata": {},
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "str13 = str1 + str12\n",
        "str13"
      ],
      "metadata": {
        "id": "bl2IFk-8vjNz",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "outputId": "3965ee76-78c2-47b5-b3f5-7ef098569655"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'Big2.2'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Reading the code from the inside of the brackets to the outside"
      ],
      "metadata": {
        "id": "wzqAhQ5-yt_x"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Read: initally it's an integer 999, then convert to string '999' then convert back to integer 999\n",
        "test1 = int(str(999))\n",
        "type(test1)"
      ],
      "metadata": {
        "id": "FMzULqgYv0OV",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "64ddd0c6-5819-4169-c698-62ac0e7c43c9"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "int"
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Read: initally it's a float 999.0, then convert to integer 999 then convert back to string '999'\n",
        "test2 = str(int(float(999)))\n",
        "type(test2)"
      ],
      "metadata": {
        "id": "HJt5qKd1wDw_",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c1036c8b-32e6-4f22-fcc6-dcddf64b75b3"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "str"
            ]
          },
          "metadata": {},
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Section 5: Python Data Structure**\n",
        "\n",
        "* List [ ] - data in between square brackert\n",
        "* Tuple ( ) - use the parenthesis bracket (the tuple column)\n",
        "* Set { } - use curly bracket\n",
        "* Dictionary { }"
      ],
      "metadata": {
        "id": "VyW7JqFuxEhO"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "###Examples of python data structure"
      ],
      "metadata": {
        "id": "UYctK0-ILYUq"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "l1 = [8.8, 'Data Science', 2024, 99, -20]\n",
        "\n",
        "t1 = (8.8, 'Data Science', 2024, 99, -20)\n",
        "\n",
        "s1 = {8.8, 'Data Science', 2024, 99, -20}\n",
        "\n",
        "print (l1)\n",
        "print(t1)\n",
        "print (s1)"
      ],
      "metadata": {
        "id": "SOLCKT_fxkQI",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6be1416a-78ca-40ad-8d77-fc79dbf2ee4a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[8.8, 'Data Science', 2024, 99, -20]\n",
            "(8.8, 'Data Science', 2024, 99, -20)\n",
            "{99, 'Data Science', 8.8, 2024, -20}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "type(l1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WR2sH0Vx3tGD",
        "outputId": "a2359e02-d200-452e-f363-3389581239a1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "list"
            ]
          },
          "metadata": {},
          "execution_count": 69
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "type(t1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Qu0hyxCr4MyV",
        "outputId": "4dee8773-194a-4e68-c292-a22009fa8868"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "tuple"
            ]
          },
          "metadata": {},
          "execution_count": 70
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "type(s1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mPG39zDh4R_8",
        "outputId": "4ec62376-460d-4da0-ac06-8f738969509e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "set"
            ]
          },
          "metadata": {},
          "execution_count": 71
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Section 5.1: List [ ]**"
      ],
      "metadata": {
        "id": "fK5oUM4d4WOm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#index\n",
        "\n",
        "print(l1[2])\n",
        "print(l1[2:])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SZt9Y29t4UuW",
        "outputId": "3ef0d92d-9a80-4ce9-87a4-114a1c7c958f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2024\n",
            "[2024, 99, -20]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Section 5.1.1: Extend Function"
      ],
      "metadata": {
        "id": "q6jbd7KG55TT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#extend (adding item to the list)\n",
        "\n",
        "l1.extend([55,'AI'])\n",
        "l1"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "m6o5Vc1b4cBW",
        "outputId": "fd9d7158-2922-4580-f482-236560d342d7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[8.8, 'Data Science', 2024, 99, -20, 55, 'AI', 55, 'AI']"
            ]
          },
          "metadata": {},
          "execution_count": 76
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#If you run the code again, they will add the item again and again in the list and will increase the index of the list\n",
        "l1.extend([55,'AI'])\n",
        "l1"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JHSJF9hi5-B9",
        "outputId": "51a2a49e-3cbe-49cd-a480-af1578b35faf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[8.8, 'Data Science', 2024, 99, -20, 55, 'AI', 55, 'AI', 55, 'AI']"
            ]
          },
          "metadata": {},
          "execution_count": 78
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Section 5.1.2: Append Function\n",
        "\n",
        "append (nested list a.k.a a list inside a list) </p>\n",
        "the nested list is considered one item (having one same index)"
      ],
      "metadata": {
        "id": "fkaBSOVV6axb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#append (nested list a.k.a a list inside a list)\n",
        "\n",
        "l1.append(['ML',999])\n",
        "l1"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BaVtRNou6I16",
        "outputId": "3d87c367-3c36-4615-f615-3c862ed815f4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[8.8, 'Data Science', 2024, 99, -20, 55, 'AI', 55, 'AI', 55, 'AI', ['ML', 999]]"
            ]
          },
          "metadata": {},
          "execution_count": 79
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#The nested list is considered one item (having one same index)\n",
        "\n",
        "\n",
        "print(l1[-1])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EQgUmVOz6oXY",
        "outputId": "1d3a4824-843d-4012-f84b-9e2d1606e80b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['ML', 999]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#how to read? first it reads index -1 = ['ML',999], then we read the next index -1 which is 999\n",
        "print(l1[-1][-1])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kU8wV4Q47S8B",
        "outputId": "a324afa5-8774-41ab-f25a-e4ab4aa6b640"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "999\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "l2 = [8.8, 'Data Science', 2024, 99, -20, 55, 'AI', ['ML', 999, ['A','B','C']]]\n",
        "#print the letter B and C\n",
        "\n",
        "print(l2[-1][-1][-2:])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "n6OSx4ls7hFR",
        "outputId": "4ec19e28-8b93-4bb5-f4ec-9815015edb3f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['B', 'C']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Section 5.1.3: Deleting Items"
      ],
      "metadata": {
        "id": "SiQNeUvC85xv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#del\n",
        "\n",
        "del(l1[1])\n",
        "l1"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "a3PXUAuP8RYd",
        "outputId": "0a0b224e-f601-4145-ba9a-6358593987ec"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[8.8, 2024, 99, -20, 55, 'AI', 55, 'AI', 55, 'AI', ['ML', 999]]"
            ]
          },
          "metadata": {},
          "execution_count": 88
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**REMEMBER:** </p>\n",
        "Each time you add or delete and item on the list, the index will increase or decrease by 1</p>\n",
        "Ensure to recount the index </p>\n",
        "Delete function only delete the index on the list"
      ],
      "metadata": {
        "id": "INWmWiYb9kTy"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "del(l1[1])\n",
        "l1"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CtP9srfa9GFs",
        "outputId": "ad8918a1-bd98-4fb5-ec24-71d8a55cbf7c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[8.8, -20, 55, 'AI', 55, 'AI', 55, 'AI', ['ML', 999]]"
            ]
          },
          "metadata": {},
          "execution_count": 90
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#find the index of an item in a list\n",
        "l1.index('AI')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sGbqxKSn9Qiz",
        "outputId": "d16995c2-651d-46fd-e750-59a82afe7b86"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "3"
            ]
          },
          "metadata": {},
          "execution_count": 94
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Section 5.1.4: Count Function\n",
        "counting the frequency of an item in a list</p>\n",
        "counting how many time an item appeared in the list"
      ],
      "metadata": {
        "id": "AOEWY-sy-B6k"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#counting the ferq of an item in a list\n",
        "l3 = [20,200,99,20, 'AI',20,'AI',20]\n",
        "\n",
        "#count\n",
        "l3.count(20)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nXaiY8bA9yVF",
        "outputId": "4668d12c-fee5-4485-adc3-536e6c9097f1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "4"
            ]
          },
          "metadata": {},
          "execution_count": 96
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "l3.count('AI')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QsSAVlp2-VQ6",
        "outputId": "95cfea59-5ed5-4d67-f4c3-a20aca7c28c2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2"
            ]
          },
          "metadata": {},
          "execution_count": 97
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#checking the index of the string AI\n",
        "l3.index('AI')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9V_vhnbF-m2F",
        "outputId": "5960a18c-6346-401e-dbd9-dc5411123f49"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "4"
            ]
          },
          "metadata": {},
          "execution_count": 99
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Section 5.1.5: Remove Function\n",
        "\n",
        "Remove the item completely from the list\n",
        "\n",
        "**Difference between remove function and delete function?** </p>\n",
        "delete function only remove the index, but other same item remains </p>\n",
        "but remove function remove all the same name item completely from the list"
      ],
      "metadata": {
        "id": "JGkC8oJx-7KE"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#remove\n",
        "l3.remove('AI')\n",
        "\n",
        "l3"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UOl0mIJK--ll",
        "outputId": "9417b627-8349-4040-ee25-2a4e4281bb24"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[20, 200, 99, 20, 20, 20]"
            ]
          },
          "metadata": {},
          "execution_count": 101
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Section 5.1.6: Insert Function\n",
        "\n",
        "Insert function will insert item into the chosen index which different from extend (extend add item to the end of the list)"
      ],
      "metadata": {
        "id": "CiAujJlOACkG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#insert\n",
        "#list.insert(index, item)\n",
        "\n",
        "l3. insert(4,'AI')\n",
        "l3"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "26UrtXef_0sv",
        "outputId": "48f28ee0-fbdd-40e2-d2f3-7358061ed3d4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[20, 200, 99, 20, 'AI', 20, 20]"
            ]
          },
          "metadata": {},
          "execution_count": 103
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Section 5.1.7: Reverse Function\n",
        "\n",
        "The reverse function will reverse the susunan of the list"
      ],
      "metadata": {
        "id": "U6Ysml_pAWAS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#reverse\n",
        "l3.reverse()\n",
        "l3"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CaFcKy9q_7jZ",
        "outputId": "96958ef0-3024-4a0e-b3b2-7dce6547192c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[20, 20, 'AI', 20, 99, 200, 20]"
            ]
          },
          "metadata": {},
          "execution_count": 104
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#reverse (if you run it again it will reverse the list again)\n",
        "l3.reverse()\n",
        "l3"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bVKz05pRAgqq",
        "outputId": "f600115c-a425-47bc-90d1-6ac845a2438c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[20, 200, 99, 20, 'AI', 20, 20]"
            ]
          },
          "metadata": {},
          "execution_count": 105
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**ERROR ALERT!** </p>\n",
        "\n",
        " The list is a combination of integer and string so it cannot be sorted, ensure the string is remove first before sorting"
      ],
      "metadata": {
        "id": "TJBuPR1pAtMx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Sort\n",
        "l3.sort()\n",
        "l3"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 176
        },
        "id": "P0KqDQZaAkj1",
        "outputId": "9a2664be-8bcc-4893-80a7-70827f4d53b5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "TypeError",
          "evalue": "'<' not supported between instances of 'str' and 'int'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-106-456e1d37693a>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m#Sort\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0ml3\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msort\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0ml3\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mTypeError\u001b[0m: '<' not supported between instances of 'str' and 'int'"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Removing the string 'AI' from the list\n",
        "l3.remove('AI')\n",
        "l3"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_uVLg0CHAoxk",
        "outputId": "f2410792-6197-4964-e7b5-96c20b9435c1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[20, 20, 99, 200, 20, 20]"
            ]
          },
          "metadata": {},
          "execution_count": 107
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Sort the list\n",
        "l3.sort()\n",
        "l3"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "N8Br2WXkA_ak",
        "outputId": "0e47369d-10f6-43f6-c95c-546d2a98668c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[20, 20, 20, 20, 99, 200]"
            ]
          },
          "metadata": {},
          "execution_count": 108
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Reversing the sorting from highest to lowest\n",
        "l3.reverse()\n",
        "l3"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MAub8N-DBBUf",
        "outputId": "04fda351-ca9f-4f9d-f939-67e7f5e49bef"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[20, 20, 20, 20, 99, 200]"
            ]
          },
          "metadata": {},
          "execution_count": 110
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#length (this function help calculate the length of the list)\n",
        "len(l3)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MVOdqDBMBEN6",
        "outputId": "538799a1-3c92-4cf1-bb4d-54ec1c0bf415"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "6"
            ]
          },
          "metadata": {},
          "execution_count": 111
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "l4 = [20,0,-5,13,-1,7,4,-3,17,9]\n",
        "\n",
        "#sort l4 in ascending and descending\n",
        "#print the highest value and the lowest value"
      ],
      "metadata": {
        "id": "bz-rzN_zBiFr"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#sort l4 (ascending)\n",
        "l4.sort()\n",
        "l4"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "b_DBHvTqCBuU",
        "outputId": "82f94824-f722-43f4-a7ee-4ba1384f3ee7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[-5, -3, -1, 0, 4, 7, 9, 13, 17, 20]"
            ]
          },
          "metadata": {},
          "execution_count": 120
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#sort l4 (descending)\n",
        "l4.reverse()\n",
        "l4"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AKYlNTywCGf8",
        "outputId": "9442a6b4-d2c3-423f-f8c0-b50b48b11e9e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[20, 17, 13, 9, 7, 4, 0, -1, -3, -5]"
            ]
          },
          "metadata": {},
          "execution_count": 126
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#print the highest value and the lowest value\n",
        "print([l4[0],l4[-1]])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5HReKsjJCQSX",
        "outputId": "5d2853d7-14fc-421d-e1f0-8c0aa3c5213f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[20, -5]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print('The highest value is:', l4[0])\n",
        "print('The lowest value is:', l4[-1])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JMTBB6JlDqbN",
        "outputId": "ae89385e-bba2-4ce8-8597-ae1277f88501"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The highest value is: 20\n",
            "The lowest value is: -5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Section 5.2: Tuple**"
      ],
      "metadata": {
        "id": "ZFZyNBDrEwYW"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **Section 5.2.1: Comparison Between list and tuple**\n",
        "\n",
        "**List**\n",
        "* Mutable: You can change the elements (add, remove, or modify) after the list is created.\n",
        "* Syntax: Defined using square brackets []. python my_list = [1, 2, 3]\n",
        "* Performance: Slightly slower due to the flexibility of mutability.\n",
        "* Use Case: Best when you need a collection of items that may change over time.\n",
        "\n",
        "**Tuple**\n",
        "* Immutable: Once created, you cannot change the elements (no adding, removing, or modifying).\n",
        "* Syntax: Defined using parentheses (). python my_tuple = (1, 2, 3)\n",
        "* Performance: Faster than lists due to immutability.\n",
        "* Use Case: Best when you need a collection of items that should not change, ensuring data integrity.\n",
        "\n",
        "### **Key Differences**\n",
        "\n",
        "1. **Mutability:**\n",
        "   - Lists: Mutable\n",
        "   - Tuples: Immutable\n",
        "\n",
        "2. **Syntax:**\n",
        "   - Lists: []\n",
        "   - Tuples: ()\n",
        "\n",
        "3. **Performance:**\n",
        "   - Lists: Slower due to overhead of mutable operations.\n",
        "   - Tuples: Faster due to immutability.\n",
        "\n",
        "4. **Use Cases:**\n",
        "   - Lists: Collections of items that need to be changed or updated.\n",
        "   - Tuples: Fixed collections of items that should not change after creation\n",
        "\n",
        "### **Example**\n",
        "\n",
        "**List**\n",
        "* my_list = [1, 2, 3]\n",
        "* my_list.append(4)\n",
        "* print(my_list)  # Output: [1, 2, 3, 4]\n",
        "\n",
        "**Tuple**\n",
        "* my_tuple = (1, 2, 3)\n",
        "* my_tuple.append(4)  # This will raise an AttributeError\n",
        "* print(my_tuple)  # Output: (1, 2, 3)\n",
        "\n",
        "\n",
        "### **Summary**\n",
        "- Use *lists* when you need a dynamic collection that may change over time.\n",
        "- Use *tuples* when you need a fixed collection of items that should remain constant."
      ],
      "metadata": {
        "id": "AbdIpD8bM0Ux"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "t1 = (8.8, ' Data Science', 2024, 99, -20)\n",
        "\n",
        "print (t1[2])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vx395ev9FZ3T",
        "outputId": "a3411629-1815-48e4-bc26-a9ca89e1bfa2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2024\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#nested tuple\n",
        "\n",
        "t2 = (8.8, 'Data Science',(2024,99),-20)\n",
        "print (t2[-2][-1])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PzbiuDL6FkfI",
        "outputId": "6f1f0cd1-12ec-47fa-9c4e-969023c5b857"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "99\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#We can't add item into the existing tuple, so we have to create a new variable to add new item\n",
        "\n",
        "t3 = ('AI','Python')\n",
        "tnew = t2 + t3\n",
        "tnew"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VlE_IWlmF9le",
        "outputId": "c8d023dd-6d44-4bee-8638-a217b1bafcdc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(8.8, 'Data Science', (2024, 99), -20, 'AI', 'Python')"
            ]
          },
          "metadata": {},
          "execution_count": 136
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Section 5.2.2: Sort Function in Tuple"
      ],
      "metadata": {
        "id": "s3MCD8fBHbTc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "t4 = (5,88,-20,99,30,8.8,0,5)\n",
        "\n",
        "#sorted\n",
        "sort_t4= sorted(t4)\n",
        "\n",
        "print(sort_t4)\n",
        "\n",
        "#This function turns the tuple to a list then sorted the list that's the reason why the result have square brackets []"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DreOEHBlGYle",
        "outputId": "bd5c45b3-65c8-4bf2-c6c9-4a1b8ca6929c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[-20, 0, 5, 5, 8.8, 30, 88, 99]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Section 5.2.3: Convert tuple into a list\n",
        "\n",
        "Other method to change tuple into a list instead of using sort function"
      ],
      "metadata": {
        "id": "w3fwxuOPHmpb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "list_t4 = list(t4)\n",
        "list_t4"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0Is167F_He-F",
        "outputId": "3aa34fe5-a64b-4e36-920e-eaf351b94803"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[5, 88, -20, 99, 30, 8.8, 0, 5]"
            ]
          },
          "metadata": {},
          "execution_count": 141
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Section 5.2.4: Convert list into tuple again"
      ],
      "metadata": {
        "id": "kC1IGxpMH_UX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "tuple_list_t4 = tuple(list_t4)\n",
        "tuple_list_t4"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xXNtGUKQHWrl",
        "outputId": "4149be7f-510d-44a7-fc29-1fa9f410b6a2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(5, 88, -20, 99, 30, 8.8, 0, 5)"
            ]
          },
          "metadata": {},
          "execution_count": 142
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "t5 = ('AI','Data',2024,'ML')\n",
        "list_new_items = [888, 'Python', 'DL']\n",
        "\n",
        "#create a new tuple of the above tuple and list"
      ],
      "metadata": {
        "id": "c-u-yekUIrt1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#convert tuple to list\n",
        "list_t5 = list(t5)\n",
        "list_t5"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gEG6a2FEJWLA",
        "outputId": "17685249-5263-45eb-a1d6-155668f69341"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['AI', 'Data', 2024, 'ML']"
            ]
          },
          "metadata": {},
          "execution_count": 147
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#adding new items\n",
        "list_t5.extend(list_new_items)\n",
        "list_t5"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iWY8ja9EJtbd",
        "outputId": "eaa9baf9-5586-4819-e208-ae72af305a39"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['AI', 'Data', 2024, 'ML', 888, 'Python', 'DL']"
            ]
          },
          "metadata": {},
          "execution_count": 145
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#converting list back to tuple\n",
        "tuple_list_t5 = tuple(list_t5)\n",
        "tuple_list_t5"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BI9obfdMJ0x_",
        "outputId": "d23e7899-c1e4-4d1e-d900-8259372e0f83"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "('AI', 'Data', 2024, 'ML')"
            ]
          },
          "metadata": {},
          "execution_count": 149
        }
      ]
    }
  ]
}
